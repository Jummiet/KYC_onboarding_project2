// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bank {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  email       String   @unique
  website     String?
  apiKey      String   @unique @default(cuid())
  webhookUrl  String?
  webhookSecret String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  admins      BankAdmin[]
  kycConfigs  KycConfig[]
  customers   Customer[]
  submissions KycSubmission[]
  webhookLogs WebhookLog[]

  @@map("banks")
}

model BankAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      AdminRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  bankId String
  bank   Bank   @relation(fields: [bankId], references: [id], onDelete: Cascade)

  @@map("bank_admins")
}

model Customer {
  id          String   @id @default(cuid())
  email       String
  phone       String?
  isVerified  Boolean  @default(false)
  emailOtp    String?
  phoneOtp    String?
  otpExpiresAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bankId      String
  bank        Bank            @relation(fields: [bankId], references: [id], onDelete: Cascade)
  submissions KycSubmission[]

  @@unique([email, bankId])
  @@map("customers")
}

model KycConfig {
  id          String   @id @default(cuid())
  name        String
  description String?
  schema      Json     // JSON schema defining required fields
  validationRules Json // Validation rules (e.g., age >= 18, ID format)
  documentRequirements Json // Required document types
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bankId      String
  bank        Bank            @relation(fields: [bankId], references: [id], onDelete: Cascade)
  submissions KycSubmission[]

  @@map("kyc_configs")
}

model KycSubmission {
  id          String          @id @default(cuid())
  sessionId   String          @unique
  status      SubmissionStatus @default(PENDING)
  data        Json            // Customer provided data
  currentStep Int             @default(0)
  totalSteps  Int
  isComplete  Boolean         @default(false)
  submittedAt DateTime?
  reviewedAt  DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relationships
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bankId      String
  bank        Bank        @relation(fields: [bankId], references: [id], onDelete: Cascade)
  kycConfigId String
  kycConfig   KycConfig   @relation(fields: [kycConfigId], references: [id], onDelete: Cascade)
  documents   Document[]

  @@map("kyc_submissions")
}

model Document {
  id          String     @id @default(cuid())
  fileName    String
  originalName String
  mimeType    String
  size        Int
  url         String
  documentType String    // passport, utility_bill, etc.
  status      DocumentStatus @default(PENDING)
  uploadedAt  DateTime  @default(now())

  // Relationships
  submissionId String
  submission   KycSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model WebhookLog {
  id          String      @id @default(cuid())
  url         String
  payload     Json
  response    String?
  status      WebhookStatus @default(PENDING)
  attempts    Int         @default(0)
  lastAttempt DateTime?
  nextRetry   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  bankId String
  bank   Bank   @relation(fields: [bankId], references: [id], onDelete: Cascade)

  @@map("webhook_logs")
}

// Enums
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  VIEWER
}

enum SubmissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  UNDER_REVIEW
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WebhookStatus {
  PENDING
  SUCCESS
  FAILED
  RETRY
}